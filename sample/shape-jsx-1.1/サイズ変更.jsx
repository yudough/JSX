/*==============================================================================  File Name: シェイプサイズ変更.jsx  Title: シェイプサイズ変更  Version: 1.1.0  Author: Stocker.jp  Author URI: http://stocker.jp/==============================================================================*/ #target photoshop// ドキュメントの解像度が 72ppi でなければアラートif (activeDocument.resolution !== 72) {	alert("解像度が72ppiではありません。「編集＞画像解像度」から解像度 72 pixel/inch にしてください。");}// 単位を px に変更preferences.rulerUnits = Units.PIXELS;// 実行フラグvar do_flag = 1;// 現在のレイヤーで選択範囲を作るtry {	var idsetd = charIDToTypeID( "setd" );	var desc85 = new ActionDescriptor();	var idnull = charIDToTypeID( "null" );	var ref57 = new ActionReference();	var idChnl = charIDToTypeID( "Chnl" );	var idfsel = charIDToTypeID( "fsel" );	ref57.putProperty( idChnl, idfsel );	desc85.putReference( idnull, ref57 );	var idT = charIDToTypeID( "T   " );	var ref58 = new ActionReference();	var idPath = charIDToTypeID( "Path" );	var idPath = charIDToTypeID( "Path" );	var idvectorMask = stringIDToTypeID( "vectorMask" );	ref58.putEnumerated( idPath, idPath, idvectorMask );	var idLyr = charIDToTypeID( "Lyr " );	var idOrdn = charIDToTypeID( "Ordn" );	var idTrgt = charIDToTypeID( "Trgt" );	ref58.putEnumerated( idLyr, idOrdn, idTrgt );	desc85.putReference( idT, ref58 );	var idVrsn = charIDToTypeID( "Vrsn" );	desc85.putInteger( idVrsn, 1 );	var idvectorMaskParams = stringIDToTypeID( "vectorMaskParams" );	desc85.putBoolean( idvectorMaskParams, true );	executeAction( idsetd, desc85, DialogModes.NO );} catch(e) {	alert("選択されているレイヤーがありません。");}// 現在のレイヤーで選択範囲を作る ここまで// アクティブレイヤーのサイズを求めるvar layObj = activeDocument.selection.bounds;var x1 = parseInt(layObj[0]);var y1 = parseInt(layObj[1]);var x2 = parseInt(layObj[2]);var y2 = parseInt(layObj[3]);// X,Y,W,H を取得var x = x1;var y = y1;var w = eval(x2-x1);var h = eval(y2-y1);  // 選択範囲を解除activeDocument.selection.deselect();// =======================================================/* ダイアログ関係 */// ダイアログオブジェクト = new Window("dialog",タイトル,[左座標,上座標,右座標,下座標])uDlg = new Window('dialog','シェイプサイズ変更',[100,100,410,285]);// ダイアログを画面に対して中央揃えにuDlg.center();// ラベル WuDlg.sText = uDlg.add("statictext",[20,23,275,10+15], "W");// テキスト入力 WuDlg.w = uDlg.add("edittext",[40,20,110,15+25], w);// ラベル HuDlg.sText = uDlg.add("statictext",[130,23,275,10+15], "H");// テキスト入力 HuDlg.h = uDlg.add("edittext",[150,20,220,15+25], h);// ラベル XuDlg.sText = uDlg.add("statictext",[20,73,275,10+15], "X");// テキスト入力 XuDlg.x = uDlg.add("edittext",[40,70,110,0+90], x);// ラベル YuDlg.sText = uDlg.add("statictext",[130,73,275,10+15], "Y");// テキスト入力 YuDlg.y = uDlg.add("edittext",[150,70,220,0+90], y);// 注意書きuDlg.sText = uDlg.add("statictext",[20,110,285,10+15], "数値にずれがある場合は使用しないで下さい。");// OKボタンuDlg.okBtn = uDlg.add("button",[60,145,150,145+25], "OK", { name:"ok"});// キャンセルボタンuDlg.cancelBtn = uDlg.add("button", [170,145,260,145+25], "キャンセル", {name: "cancel"});// 複製ボタンuDlg.copyBtn = uDlg.add("button",[240,15,295,25+15], "複製", { name:"copy"});// 複製ボタンが押されたら複製処理uDlg.copyBtn.onClick = function() {	// 実行フラグに2を代入	do_flag = 2;	uDlg.close();}// キャンセルボタンが押されたらキャンセル処理（ESCキー含む）uDlg.cancelBtn.onClick = function() {	// 実行フラグに0を代入	do_flag = 0;	uDlg.close();}// ダイアログを表示uDlg.show();// =======================================================/* シェイプを移動し、レイヤー名をリネーム */// 実行フラグが1（OKボタンが押された）であればif (do_flag == 1) {	// 現在のレイヤーの r の数値を取得する関数を実行	get_layer_r();	// シェイプを移動する関数（107行目）を実行	move_shape();	// シェイプをリサイズする関数（89行目）を実行	resize_shape();	// アクティブレイヤーをリネームする関数（142行目）を実行	rename_layer();}// 実行フラグが2（複製ボタンが押された）であればif (do_flag == 2) {	// 現在のレイヤーの r の数値を取得する関数を実行	get_layer_r();	// レイヤーを複製する関数を実行	layer_copy();	// シェイプを移動する関数（107行目）を実行	move_shape();	// シェイプをリサイズする関数（89行目）を実行	resize_shape();	// アクティブレイヤーをリネームする関数（142行目）を実行	rename_layer();}// =======================================================/* 以下関数 *//* 現在のレイヤーの r の数値を取得する関数 */// グローバル変数 number_r と layer_name_flagを宣言var number_r;var layer_name_flag;function get_layer_r() {	// アクティブなレイヤーのレイヤー名を取得	var layer_name = activeDocument.activeLayer.name;	// try {} の中を実行してみて、もしエラーが出れば catch {} の中を実行	try {		// 数値を取得し、変数 number に代入		var number = layer_name.match(/\d+/g);		// 変数 number の3つめの値を number_r に代入		number_r = number[2];		layer_name_flag = true;	} catch(error) {		// エラーが出た場合は layer_name_flag 変数に false を代入		layer_name_flag = false;	}}/* シェイプをリサイズする関数*/function resize_shape() {	// 新しいWの%を求める（ダイアログで入力されたW÷現在のW×100）	var new_w_per = eval(eval(uDlg.w.text)/w*100);	// 新しいHの%を求める（ダイアログで入力されたH÷現在のH×100）	var new_h_per = eval(eval(uDlg.h.text)/h*100);	// try {} の中を実行してみて、もしエラーが出れば catch {} の中を実行	try {		// レイヤーのリサイズ（Wの%, Hの%）		activeDocument.activeLayer.resize(new_w_per, new_h_per);	} catch(error) {		alert('リサイズしたいレイヤーが選択されていません。');	}}/* レイヤーを複製する関数 */function layer_copy() {	// 現在のレイヤーを複製	activeDocument.activeLayer.duplicate();}/* シェイプを移動する関数 */function move_shape() {	// 相対値で何px移動すべきか求める	var new_x = 0;	var new_y = 0;		// X分岐フラグ = ユーザーが入力したX - 現在のX	// ユーザーに入力させた値は parseInt() で数値に（そうしないと文字列扱い→8進数扱いになる）	flag_x =  parseInt(eval(uDlg.x.text)) - x;		// ユーザーが入力したX と 現在のX が等しくなければ	if (parseInt(eval(uDlg.x.text)) != x) {		// ユーザーが入力したX - 現在のX		new_x = parseInt(eval(uDlg.x.text) - x);	}		// Y分岐フラグ = ユーザーが入力したY - 現在のY	flag_y =  parseInt(eval(uDlg.y.text)) - y;		// ユーザーが入力したY と 現在のY が等しくなければ	if (parseInt(eval(uDlg.y.text)) != y) {		// ユーザーが入力したY - 現在のY		new_y = parseInt(eval(uDlg.y.text) - y);	}		// サイズ変更された場合、その半分の値だけ移動（左上基準でサイズ変更）	var new_x2 = eval(eval(uDlg.w.text) - w) / 2;	var new_y2 = eval(eval(uDlg.h.text) - h) / 2;	new_x = new_x + new_x2;	new_y = new_y + new_y2;		// try {} の中を実行してみて、もしエラーが出れば catch {} の中を実行	try {		// レイヤーの移動（Xの相対値, Yの相対値）		activeDocument.activeLayer.translate(new_x, new_y);	} catch(error) {		alert('リサイズしたいレイヤーが選択されていません。');	}}/* アクティブレイヤーのレイヤー名を変更する関数 */function rename_layer() {	// レイヤー名が「W 100 H 100 R 0」のような形式で、Rの数値を取得できていれば	if (layer_name_flag === true) {		// レイヤー名をリネーム: 右側が新しいレイヤー名（例: W 100   H 100   R 0）		activeDocument.activeLayer.name = "W " + parseInt(eval(uDlg.w.text)) + "   H " + parseInt(eval(uDlg.h.text)) + "   R " + parseInt(number_r);	}}